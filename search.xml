<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>nginx学习笔记</title>
      <link href="/2018/12/17/nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/12/17/nginx%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      <content type="html"><![CDATA[<h1 id="nginx学习笔记"><a href="#nginx学习笔记" class="headerlink" title="nginx学习笔记"></a>nginx学习笔记</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>mac os:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br></pre></td></tr></table></figure></p><p>ubuntu:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nginx</span><br></pre></td></tr></table></figure><h2 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h2> <figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nginx</span><br></pre></td></tr></table></figure><p><a href="http://localhost" target="_blank" rel="noopener">http://localhost</a>  检测是否访问成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nginx -s stop // 强制停掉</span><br><span class="line">nginx -s quit // 优雅停掉</span><br><span class="line">nginx -s reload // 重启</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -ef|grep nginx</span><br></pre></td></tr></table></figure><p>nginx进程在启动的时候，会附带一个守护进程，用于保护正式进程不被异常终止；如果守护进程一旦发现nginx进程被终止了，会自动重启该进程。</p><p>守护进程一般会称为master进程，业务进程被称为worker进程</p><h2 id="nginx-conf"><a href="#nginx-conf" class="headerlink" title="nginx.conf"></a>nginx.conf</h2><p>mac下的nginx.conf位置: /usr/local/etc/nginx/nginx.conf</p><p>可以命令搜索<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find / -name nginx.conf</span><br></pre></td></tr></table></figure></p><p>嫌麻烦打开，配置别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// .zshrc code是vscode命令快捷打开功能</span><br><span class="line">alias ngc=&quot;code /usr/local/etc/nginx/nginx.conf&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">... #全局块</span><br><span class="line">events &#123; #events块</span><br><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">http #http块</span><br><span class="line">&#123;</span><br><span class="line">    ... #http全局块</span><br><span class="line"></span><br><span class="line">    server #server块</span><br><span class="line">    &#123;</span><br><span class="line">        ... #server全局块</span><br><span class="line">        location [PATTERN] #location块</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">        location [PATTERN]</span><br><span class="line">        &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">     &#125;</span><br><span class="line"></span><br><span class="line">    server</span><br><span class="line">    &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ... #http全局块</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="默认root路径"><a href="#默认root路径" class="headerlink" title="默认root路径"></a>默认root路径</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">root html =&gt; /usr/local/Cellar/nginx/[version]/html</span><br><span class="line">root /var/www =&gt; /usr/local/var/www</span><br></pre></td></tr></table></figure><h2 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       8080;</span><br><span class="line">    server_name  localhost;</span><br><span class="line">    location ...</span><br></pre></td></tr></table></figure><p>我们访问<a href="http://xxx.com/proxy/index.html" target="_blank" rel="noopener">http://xxx.com/proxy/index.html</a></p><p>case 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /proxy/ &#123;</span><br><span class="line">    proxy_pass  http://127.0.0.1/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>代理到 <a href="http://127.0.0.1/index.html" target="_blank" rel="noopener">http://127.0.0.1/index.html</a></p></blockquote><p>case 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /proxy/ &#123;</span><br><span class="line">    proxy_pass  http://127.0.0.1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>代理到 <a href="http://127.0.0.1/proxy/index.html" target="_blank" rel="noopener">http://127.0.0.1/proxy/index.html</a></p></blockquote><p>case 3:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /proxy/ &#123;</span><br><span class="line">    proxy_pass  http://127.0.0.1/api/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>代理到 <a href="http://127.0.0.1/api/index.html" target="_blank" rel="noopener">http://127.0.0.1/api/index.html</a></p></blockquote><p>case 4:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location /proxy/ &#123;</span><br><span class="line">    proxy_pass  http://127.0.0.1/api;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><blockquote><p>代理到 <a href="http://127.0.0.1/apiindex.html" target="_blank" rel="noopener">http://127.0.0.1/apiindex.html</a></p></blockquote><p>看case 2 和 4是比较难理解的，为什么都是没有后面的/差别为什么这么大,个人理解，如果proxy_pass只是域名则只替换原地址域名，否则全部替换掉。</p><p>用到的文件路径</p><p>ng配置: nginx.conf =&gt; <code>/usr/local/etc/nginx</code></p><p>访问日志: access.log =&gt; <code>/usr/local/var/log/nginx</code></p><h2 id="优先级"><a href="#优先级" class="headerlink" title="优先级"></a>优先级</h2><table><thead><tr><th style="text-align:center">方式</th><th style="text-align:center">意义</th></tr></thead><tbody><tr><td style="text-align:center">=PATH</td><td style="text-align:center">精确匹配路径</td></tr><tr><td style="text-align:center">^~PATH</td><td style="text-align:center">使用正则表达式匹配URI的前半段</td></tr><tr><td style="text-align:center">~PATH</td><td style="text-align:center">使用正则表达式匹配URI，区分大小写</td></tr><tr><td style="text-align:center">~*PATH</td><td style="text-align:center">使用正则表达式匹配URI，不区分大小写</td></tr><tr><td style="text-align:center">PATH</td><td style="text-align:center">直接使用PATH匹配，表示在PATH路径下的资源</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">location = / &#123;                                  # 仅当URI为&quot;/&quot;时，使用A配置</span><br><span class="line">    [ configuration A ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location / &#123;                                    # URI为&quot;/&quot;下包含的路径时，使用B配置</span><br><span class="line">    [ configuration B ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location /documents/ &#123;                          # URI为&quot;/documents/&quot;下包含的路径时，使用C配置</span><br><span class="line">    [ configuration C ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ^~ /images/ &#123;                         # URI靠前部分为&quot;/images/&quot;，使用D配置</span><br><span class="line">    [ configuration D ]</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">location ~* \.(gif|jpg|jpeg)$ &#123;                   # URI结尾是gif、jpg或jpeg时，使用E配置</span><br><span class="line">    [ configuration E ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>按上述定义，和优先级规则。比如：</p><p>“<a href="http://www.test.com/”匹配A配置；" target="_blank" rel="noopener">www.test.com/”匹配A配置；</a><br>“<a href="http://www.test.com/test”、”www.test.com/example”匹配B配置，因为URI都在”/”下；" target="_blank" rel="noopener">www.test.com/test”、”www.test.com/example”匹配B配置，因为URI都在”/”下；</a><br>“<a href="http://www.test.com/documents/test.html”匹配C配置，虽然它也符合B配置，但能匹配到的越长优先级越高；" target="_blank" rel="noopener">www.test.com/documents/test.html”匹配C配置，虽然它也符合B配置，但能匹配到的越长优先级越高；</a><br>“<a href="http://www.test.com/images/test.html”匹配D配置，虽然它也符合B配置，但正则表达式匹配前端字符优先级高；" target="_blank" rel="noopener">www.test.com/images/test.html”匹配D配置，虽然它也符合B配置，但正则表达式匹配前端字符优先级高；</a><br>“<a href="http://www.test.com/documents/test.jpg”匹配E配置，虽然它也符合C配置，但正则表达式匹配高于普通字符串。" target="_blank" rel="noopener">www.test.com/documents/test.jpg”匹配E配置，虽然它也符合C配置，但正则表达式匹配高于普通字符串。</a></p><h2 id="配置https本地开发环境"><a href="#配置https本地开发环境" class="headerlink" title="配置https本地开发环境"></a>配置https本地开发环境</h2><p>在开发qtalk-web版本时遇到这样一个需求</p><p><img src="../../public/images/q.png" alt="images"></p><p>实现谷歌推送消息，经过调研发现这个需要在https协议下，api才会生效，当时搜出的方法就是nginx，可是由于时间紧迫并没有时间研究，使用的比较快捷有效的方法，恰巧beta环境有https的支持，那我本地用charles劫持了js代码到本地，利用beta环境变成本地的调试环境。</p><p>我是通过这篇博客学习了https本地搭建</p><p><a href="https://www.jianshu.com/p/fe0fadb38600" target="_blank" rel="noopener">https://www.jianshu.com/p/fe0fadb38600</a></p><p>全局搜索配置文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo find / -name nginx.conf</span><br></pre></td></tr></table></figure><p>证书及https配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd /usr/local/etc/nginx # 进入希望生成证书和私钥的目录，这里我们选择nginx.conf所在目录</span><br><span class="line">openssl genrsa -des3 -out server.key 1024   # 创建服务器私钥，该命令会让你输入一个口令</span><br><span class="line">openssl req -new -key server.key -out server.csr    # 创建签名请求的证书(CSR)</span><br><span class="line">cp server.key server.key.org    </span><br><span class="line">openssl rsa -in server.key.org -out server.key  # 在加载SSL支持的Nginx并使用上述私钥时除去必须的口令</span><br><span class="line">openssl x509 -req -days 365 -in server.csr -signkey server.key -out server.crt  # 最后标记证书使用上述私钥和CSR</span><br></pre></td></tr></table></figure><p>配置 nginx.config<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"># HTTPS server</span><br><span class="line">    #</span><br><span class="line">    server &#123;</span><br><span class="line">        listen       443 ssl;</span><br><span class="line">        server_name  localhost;</span><br><span class="line"></span><br><span class="line">        # ssl_certificate      cert.pem;</span><br><span class="line">        # ssl_certificate_key  cert.key;</span><br><span class="line">        ssl_certificate      server.crt;</span><br><span class="line">        ssl_certificate_key  server.key;</span><br><span class="line"></span><br><span class="line">        # ssl_session_cache    shared:SSL:1m;</span><br><span class="line">        # ssl_session_timeout  5m;</span><br><span class="line"></span><br><span class="line">        # ssl_ciphers  HIGH:!aNULL:!MD5;</span><br><span class="line">        # ssl_prefer_server_ciphers  on;</span><br><span class="line"></span><br><span class="line">        location / &#123;</span><br><span class="line">            root   /www/;</span><br><span class="line">            index  index.html index.htm;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></p><p>那我这里想在我的项目里用到https协议，这样还不能满足，我需要更改下location</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">            proxy_pass http://my.corp.qunar.com:3002;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><p>还是会报一个错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET https://my.corp.qunar.com/index.js net::ERR_CONTENT_LENGTH_MISMATCH 200 (OK)</span><br></pre></td></tr></table></figure><p>google后发现是因为nginx会从缓存中拿文件，是这个目录<code>proxy_temp</code>,而没有权限，所以网上一些方法是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chown -R _www:admin proxy_temp</span><br></pre></td></tr></table></figure></p><p>不过更改文件夹权限我是莫名地抵触的，我选择了一个我认为还不错的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line">            proxy_pass http://my.corp.qunar.com:3002;</span><br><span class="line">            proxy_buffering off;</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure></p><p>就是把缓存禁掉</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>ng访问地址404 自己会根据优先级逐级查找，如果都404，则按照原地址访问。这样就有可能导致形成内循环，相互跳转，产生错误。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>redux源码随便读了读</title>
      <link href="/2018/12/07/redux%E6%BA%90%E7%A0%81%E9%9A%8F%E4%BE%BF%E8%AF%BB%E4%BA%86%E8%AF%BB/"/>
      <url>/2018/12/07/redux%E6%BA%90%E7%A0%81%E9%9A%8F%E4%BE%BF%E8%AF%BB%E4%BA%86%E8%AF%BB/</url>
      <content type="html"><![CDATA[<h1 id="redux源码浅析"><a href="#redux源码浅析" class="headerlink" title="redux源码浅析"></a>redux源码浅析</h1><p><img src="http://img4.imgtn.bdimg.com/it/u=779109256,4038797986&amp;fm=26&amp;gp=0.jpg" alt="image"></p><hr><blockquote><p>祭出我多年珍藏的redux flow 你看这个redux又小又牛逼 respect skr~</p></blockquote><p>如果你之前接触过redux应该看过无数次这个图了吧，组件触发一个动作，ActiconCreators生成一个action通过dipatch方法经过reducers处理返回新的state到store再触发重新render。</p><hr><p>而今天讲的不光包括工作流程，还有redux初始化过程，以及react和redux的配合使用。</p><hr><p>看源码先提几个问题，然后带着问题看源码是怎么解决的？</p><ol><li>为什么使用redux？</li><li>redux怎么管理state？</li><li>redux是怎么触发重新render的？</li></ol><hr><h3 id="为什么使用redux？"><a href="#为什么使用redux？" class="headerlink" title="为什么使用redux？"></a>为什么使用redux？</h3><p>在我另一篇对比<a href="http://pagnkelly.github.io/2018/10/04/redux-mobx/" target="_blank" rel="noopener">redux和mobx对比</a>并没有讲到～（皮一下狠开心）。redux的产生必然他的原因，写个轮子自然有他要跑的道路，如果你不知道redux是来干什么，说明你还没遇到ta解决的问题，或者你遇到了并不知道redux可以拿来解决。</p><p>记得我刚开始学这个的时候纯靠记忆来写，不知所以然，再加上有同事把模版代码写好，那我更不用动脑，无脑虚区～。然而真正遇到问题时，解决起来是非常慢速和困难的。</p><p>下面我画一张图来解释redux的好处<br><img src="https://raw.githubusercontent.com/pagnkelly/pagnkelly.github.io/master/images/reactflow.jpg" alt="image"></p><p>如果你遇到这种场景，组件套组件层级很深的话，想与旁边的同级元素进行交互时，想象一下没有redux，纯react来做的话是不是需要一层层通过props传递，不能做跨级操作，让人感到疲惫。那么redux来了，建立一个共有的state，大家需要什么都可以从这里拿，更改了，还会通知拿了的人需要更新了，再也不需要口口相传，直接互联网。</p><blockquote><p>其他两个问题将在源码中一一阐述</p></blockquote><h3 id="源码开始"><a href="#源码开始" class="headerlink" title="源码开始"></a>源码开始</h3><p>下面来看一下源码</p><p><img src="https://github.com/pagnkelly/pagnkelly.github.io/blob/master/images/reduxyuanma.png?raw=true" alt="image"></p><p>主要就5个文件 代码总共大概20多k(未压缩) 源码不是很多</p><p>首先看下index<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> createStore <span class="keyword">from</span> <span class="string">'./createStore'</span></span><br><span class="line"><span class="keyword">import</span> combineReducers <span class="keyword">from</span> <span class="string">'./combineReducers'</span></span><br><span class="line"><span class="keyword">import</span> bindActionCreators <span class="keyword">from</span> <span class="string">'./bindActionCreators'</span></span><br><span class="line"><span class="keyword">import</span> applyMiddleware <span class="keyword">from</span> <span class="string">'./applyMiddleware'</span></span><br><span class="line"><span class="keyword">import</span> compose <span class="keyword">from</span> <span class="string">'./compose'</span></span><br><span class="line"><span class="keyword">import</span> warning <span class="keyword">from</span> <span class="string">'./utils/warning'</span></span><br><span class="line"><span class="keyword">import</span> __DO_NOT_USE__ActionTypes <span class="keyword">from</span> <span class="string">'./utils/actionTypes'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * This is a dummy function to check if the function name has been altered by minification.</span></span><br><span class="line"><span class="comment"> * If the function has been minified and NODE_ENV !== 'production', warn the user.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">isCrushed</span>(<span class="params"></span>) </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (</span><br><span class="line">  process.env.NODE_ENV !== <span class="string">'production'</span> &amp;&amp;</span><br><span class="line">  <span class="keyword">typeof</span> isCrushed.name === <span class="string">'string'</span> &amp;&amp;</span><br><span class="line">  isCrushed.name !== <span class="string">'isCrushed'</span></span><br><span class="line">) &#123;</span><br><span class="line">  warning(</span><br><span class="line">    <span class="string">'You are currently using minified code outside of NODE_ENV === "production". '</span> +</span><br><span class="line">      <span class="string">'This means that you are running a slower development build of Redux. '</span> +</span><br><span class="line">      <span class="string">'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify '</span> +</span><br><span class="line">      <span class="string">'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) '</span> +</span><br><span class="line">      <span class="string">'to ensure you have the correct code for your production build.'</span></span><br><span class="line">  )</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;</span><br><span class="line">  createStore,</span><br><span class="line">  combineReducers,</span><br><span class="line">  bindActionCreators,</span><br><span class="line">  applyMiddleware,</span><br><span class="line">  compose,</span><br><span class="line">  __DO_NOT_USE__ActionTypes</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>主要是把其他文件整合导出，这里没什么可讲。其他文件我也不想一个个讲，因为串不起来就记不住。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</span><br><span class="line"><span class="keyword">import</span> ReactDOM <span class="keyword">from</span> <span class="string">'react-dom'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; Provider &#125; <span class="keyword">from</span> <span class="string">'react-redux'</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; createStore, applyMiddleware &#125; <span class="keyword">from</span> <span class="string">'redux'</span>;</span><br><span class="line"><span class="keyword">import</span> createSagaMiddleware <span class="keyword">from</span> <span class="string">'redux-saga'</span>;</span><br><span class="line"><span class="keyword">import</span> reducer <span class="keyword">from</span> <span class="string">'./reducer'</span>;</span><br><span class="line"><span class="keyword">import</span> saga <span class="keyword">from</span> <span class="string">'./saga'</span>;</span><br><span class="line"><span class="keyword">import</span> Page <span class="keyword">from</span> <span class="string">'./'</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> root = <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>);</span><br><span class="line"><span class="keyword">const</span> sagaMiddleware = createSagaMiddleware();</span><br><span class="line"><span class="keyword">const</span> store = createStore(reducer, applyMiddleware(sagaMiddleware));</span><br><span class="line">sagaMiddleware.run(saga);</span><br><span class="line"></span><br><span class="line">ReactDOM.render(</span><br><span class="line">  &lt;Provider store=&#123;store&#125;&gt;</span><br><span class="line">    &lt;Page /&gt;</span><br><span class="line">  &lt;<span class="regexp">/Provider&gt;,</span></span><br><span class="line"><span class="regexp">  root</span></span><br><span class="line"><span class="regexp">);</span></span><br><span class="line"><span class="regexp">if (module.hot) &#123;</span></span><br><span class="line"><span class="regexp">  module.hot.accept(['.'], () =&gt; &#123;</span></span><br><span class="line"><span class="regexp">    /</span><span class="regexp">/ eslint-disable-next-line</span></span><br><span class="line"><span class="regexp">    render(require('.'));</span></span><br><span class="line"><span class="regexp">  &#125;);</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br></pre></td></tr></table></figure><p>上面是随便粘了一段业务中的代码，因为讲redux 中间件<code>saga</code>可以忽略掉，缘起缘灭就是entry的代码。</p><h3 id="缘起缘灭"><a href="#缘起缘灭" class="headerlink" title="缘起缘灭"></a>缘起缘灭</h3><p>最主要的一行是这一行<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> store = createStore(reducer, applyMiddleware(sagaMiddleware));</span><br></pre></td></tr></table></figure></p><p>还记得我前面说的主要的五个文件<code>createStore</code>,<code>combineReducers</code>,<code>bindActionCreators</code>,<code>applyMiddleware</code>,<code>compose</code><br>这就用到了俩。其实是三个<br>因为<code>reducer</code>这个参数其实是<br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// reducer</span></span><br><span class="line">...</span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> combineReducers(&#123;</span><br><span class="line">  reducer</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>那么<code>combineReducers</code>也用上了<br>其他两个一个会在中间价处用到（<code>compose</code>），其实是一个柯里化函数，跟redux本身没什么关系。另一个是为action和dispach方便调用的语法糖函数（<code>bindActionCreators</code>）<br>这样一看是不是觉得redux文件很少十分的简单呢，其实不然，而且如果要配合react使用，还有高效的发送action,或者在复杂的项目里进行命名空间划分的时候就还要增加很多东西。</p><p>好 看下这段代码的执行</p><p><img src="https://github.com/pagnkelly/pagnkelly.github.io/blob/master/images/redux1.png?raw=true" alt="image"></p><h3 id="按照步骤分析"><a href="#按照步骤分析" class="headerlink" title="按照步骤分析"></a>按照步骤分析</h3><p>步骤1：<code>combineReducers</code>是个高阶函数，这里看下代码</p><p><img src="https://github.com/pagnkelly/pagnkelly.github.io/blob/master/images/combineReducer.png?raw=true" alt="image"></p><p>做了一些检测，返回的函数<code>combination</code>是每次发action时，reducer执行处理的地方，现在初始化还没用到这个<code>combination</code> ,等下跑起来的时候再细讲。</p><p>步骤2：<code>applyMiddleware</code>这个函数还是很有意思的,他也是一个高阶函数,但不同于<code>combineReducers</code>的是，层级深了一层，也就是说<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```js</span><br><span class="line">import compose from &apos;./compose&apos;</span><br><span class="line"></span><br><span class="line">export default function applyMiddleware(...middlewares) &#123;</span><br><span class="line">  return createStore =&gt; (...args) =&gt; &#123;</span><br><span class="line">    const store = createStore(...args)</span><br><span class="line">    let dispatch = () =&gt; &#123;</span><br><span class="line">      throw new Error(</span><br><span class="line">        `Dispatching while constructing your middleware is not allowed. ` +</span><br><span class="line">          `Other middleware would not be applied to this dispatch.`</span><br><span class="line">      )</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    const middlewareAPI = &#123;</span><br><span class="line">      getState: store.getState,</span><br><span class="line">      dispatch: (...args) =&gt; dispatch(...args)</span><br><span class="line">    &#125;</span><br><span class="line">    const chain = middlewares.map(middleware =&gt; middleware(middlewareAPI))</span><br><span class="line">    dispatch = compose(...chain)(store.dispatch)</span><br><span class="line"></span><br><span class="line">    return &#123;</span><br><span class="line">      ...store,</span><br><span class="line">      dispatch</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><code>applyMiddleware</code>这个高阶函数作为参数，执行之后返回了又一个高阶函数作为参数，而这个高阶函数还需要createStore作为参数，目的是拿到store的getState方法，还有dispatch这两个作为参数传给每一个中间件，让他们各自完成自己想要的封装。</p><p>可是他的设计者为什么要搞的那么花了呼哨呢？如果我面对这个需求的话，我可能不需要<code>applyMiddleware</code>这个高阶函数，把middlewares直接传给<code>createStore</code>，这样<code>createStore</code>中，getState方法还容易拿到，这些中间件的捆绑操作交给<code>createStore</code>，岂不是更容易让人理解吗？</p><p>这里不难发现，如果你知道函数式编程的话，或者这里是什么设计模式，我还未了解。他用了函数式编程的方式，让代码更容易测试，更加健壮。关键在于，如果按照我之前说的方式来执行middlewares，首先你的中间件是不确定有多少个的，那么对于传参的时候，redux的用户是非常不爽的，<code>createStore</code>要传多种多个参数，比如<code>createStore(reducer, initstate, middleware1, middleware2)</code>这种设计上是不可取的，那你说middleware可以是个一个数组啊，比如<code>createStore(reducer, initstate, [middleware1, middleware2])</code>。emm这块还没想到怎么反驳。。。。或许根本反驳不了，就是多种实现方式，各有取舍，相比之下的选择而已。</p><p>我其实想学会redux在设计<code>applyMiddleware</code>这个的实现方式，想在下一次我遇到这种场景去使用到，但是我或许还没领悟其中的精髓，就算知道怎么实现了，下一次我想我不会活学活用，还是会使用我熟悉的方式，打破固有思维还是很难得，但是打破了就是成长。我的理解只到他是函数式编程，只不过复杂了一些,<code>createStore</code>调用了自己而已。</p><p>到这里，<code>createStore</code>里的参数都执行了一遍，又返回了各自的函数，接下来才是要执行createStore，让我们揭开<code>createStore</code>神秘的面纱。</p><p><img src="https://github.com/pagnkelly/pagnkelly.github.io/blob/master/images/createStore.png?raw=true" alt="image"></p><p>经过一系列判断， enhancer就是之前的<code>applyMiddleware</code>返回的函数，ta译为增强函数，把自己传进去，第二次调用再传进reducer和preloadedState（undefined）。然后<code>applyMiddleware</code>返回的函数再执行<code>createStore</code>。通过了前面判断了，接着执行<code>createStore</code>里定义的dispatch，dispatch才调用了一遍<code>reducer</code>。是不是很绕，那么让我来梳理一个图，你大概就能明白。</p><h3 id="总结步骤"><a href="#总结步骤" class="headerlink" title="总结步骤"></a>总结步骤</h3><p><img src="https://github.com/pagnkelly/pagnkelly.github.io/blob/master/images/jsflow.png?raw=true" alt="image"></p><p>而combination在每次发送action都会调用。主要在最后两个步骤里，一个dispatch方法里。</p><p><img src="https://github.com/pagnkelly/pagnkelly.github.io/blob/master/images/ques.png?raw=true" alt="image"></p><h3 id="遗留问题"><a href="#遗留问题" class="headerlink" title="遗留问题"></a>遗留问题</h3><p>这里就是之前遗留的两个问题</p><ol start="2"><li>redux怎么管理state？</li><li>redux是怎么触发重新render的？</li></ol><p>当前的state都是通过reducer执行处理来的，而listener这个函数里其实做的是this.setState操作，就可以达到利用react自己触发重新render，也比较好解释<em>react-redux</em>这个库中提供的provider和connect做了些什么，provider其实就是一个react组件，做了提供listener，为listener放入了this.setState().我们经常看到provider放在组件的最上层，也是这个原因，一旦state改变，所有connect的子组件都会判断刷新，如果connect的子组件里的props更新了，那么就会告知刷新，否则不会刷新。这是因为connect是个高阶组件，他会在<code>shouldComponentUpdate</code>生命周期判断是否需要刷新。<br>那么为什么redux是怎样直接传递props给深层级的组件呢，其实redux自己是做不到的。而是provider接收Redux的store作为props，通过context对象传递给子孙组件上的connect。</p><p>当然你也可以直接用creatStore的subscribe来监听组件，<em>react-redux</em>只不过是redux配合react的非常好用的工具，subscribe这里redux用了观察者模式，这是js领域经常用到的设计模式。这里就不多讲了。</p><p>compose和bindActionCreator这里也不讲了，我觉得我上面简单提到的足以解释两个方法，并不影响你理解redux的机制。有兴趣你可以参考其他的博文了解这两个方法，比你想象的要简单。</p>]]></content>
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redux </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>redux-mobx</title>
      <link href="/2018/10/04/redux-mobx/"/>
      <url>/2018/10/04/redux-mobx/</url>
      <content type="html"><![CDATA[<h1 id="redux-amp-mobx对比"><a href="#redux-amp-mobx对比" class="headerlink" title="redux&amp;mobx对比"></a>redux&amp;mobx对比</h1><p><img src="https://img3.mukewang.com/5b59ddc60001245910000502.jpg" alt="image"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>redux和mobx都是javascript的状态管理库，我们团队一直都在用它与react一起使用，我一直都在用redux，各种项目，各种用法。redux + thunk, redux + saga,或是引入immutable。我最近在一个后台内部使用的项目上尝试了mobx，由于有redux的使用基础，询问了下用过的同事，传授了几句话，甚至没看mobx的文档就开始使用了，可见redux和mobx从使用上这方面讲，存在很多的相同点。可能你看过很多的文章有关于这方面的，我写的也与他们别无二至，我的观点就是mobx也好，redux也好，他们各有优缺点，用哪一个都没有错，即使你的项目越来越大，mobx也完全可以胜任。</p><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul><li>函数式编程，面向对象编程和响应式编程</li><li>简单讲下redux，着重讲下mobx</li><li>对比redux&amp;mobx优缺点</li><li>使用mobx时的心得体会</li></ul><h3 id="函数式编程，面向对象编程和响应式编程"><a href="#函数式编程，面向对象编程和响应式编程" class="headerlink" title="函数式编程，面向对象编程和响应式编程"></a>函数式编程，面向对象编程和响应式编程</h3><p>之所以讲这个，是因为redux是遵循函数式编程思想，例如reducer通过一个个的<strong>纯函数</strong>把旧的state生成新的state，而不是改变旧的state,这就存在函数式编程的思想。又引出了一个概念<strong>纯函数</strong>，所谓纯函数就是同样的输入，同样的输出。举个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function add (a, b) &#123;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(1, 2); // 3</span><br></pre></td></tr></table></figure></p><p>最简单的一个例子，add函数在输入1，2的参数情况下，始终会输出3。不会出现任何所谓的副作用，也就是影响到其他的地方，例如全局变量。<br>ok，有一个问题，</p><h3 id="redux为什么要用纯函数来处理state"><a href="#redux为什么要用纯函数来处理state" class="headerlink" title="redux为什么要用纯函数来处理state?"></a>redux为什么要用纯函数来处理state?</h3><blockquote><p>reducer将旧的状态（prev）和要修改的数据一起传进去，然后返回一个新的（next）状态，prev和next相比较来确定storge数据是否改变。如果我们用不纯的函数，prev和next将一致，就算数据改变，hasChanged也会是false。</p></blockquote><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p>你可能常常听到面向对象有三大特性：<strong>封装，继承，多态</strong>。这里不做过多阐述。</p><blockquote><p>说下面向对象编程产生的原因：由于面向过程在构造系统时，无法解决<br><strong>重用，维护，扩展</strong><br>的问题，代码逻辑过于复杂，代码晦涩难懂，因此人们开始想能不能让计算机直接模拟现实的环境，以人类解决问题的方法，思路，习惯和步骤来设计相应的应用程序。于是，面向对象的编程思想就产生了。</p></blockquote><p>面向对象编程最重要的就是类，类是创建对象的模版，一个类可以创建多个对象。mobx的store就是一个个类，这里的类只创造了一个对象，多个类的实例化也就是多个store。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, action &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexStore</span> </span>&#123;</span><br><span class="line">  @observable searchField = <span class="number">1</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">otherStore</span> </span>&#123;</span><br><span class="line">  @observable searchField = <span class="number">1</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  index: <span class="keyword">new</span> IndexStore(),</span><br><span class="line">  other: <span class="keyword">new</span> otherStore()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="响应式编程"><a href="#响应式编程" class="headerlink" title="响应式编程"></a>响应式编程</h2><p>这里我看到一个很好的比喻</p><blockquote><p>老张还喝水，那么煮开水<br>有两把水壶，一个是普通水壶，一个是响水壶.  </p><ol><li>老张把水壶放到火上，在旁边等待着水开。（同步阻塞）<br>老张觉得自己有点傻</li><li>于是老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没开（同步非阻塞）<br>老张还是觉得有点傻，于是乎换了水壶</li><li>这回用的是响水壶，老张继续在旁边等着响。（异步阻塞）<br>老张觉得这样不用等啊，听声就好了</li><li>于是老张去客厅看电视了，响了再去看水壶（异步非阻塞）<br>老张心满意足，很是傲娇</li></ol></blockquote><blockquote><p>回归到本质回答这个问题：响应式编程，本质上是对数据流或某种变化所作出的反应，但是这个变化什么时候发生是未知的，所以他是一种基于异步、回调的方式在处理问题。</p></blockquote><h3 id="那么mobx在哪里用到了这种思想呢？"><a href="#那么mobx在哪里用到了这种思想呢？" class="headerlink" title="那么mobx在哪里用到了这种思想呢？"></a>那么mobx在哪里用到了这种思想呢？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var globalID = 0</span><br><span class="line">function observable(obj) &#123;</span><br><span class="line">    var oID = ++globalID</span><br><span class="line">    return new Proxy(obj, &#123;</span><br><span class="line">        get: function (target, key, receiver) &#123;</span><br><span class="line">            collect.startCollect(oID + &apos;&apos; +key)</span><br><span class="line">            return Reflect.get(target, key, receiver)</span><br><span class="line">        &#125;,</span><br><span class="line">        set: function (target, key, value, receiver) &#123;</span><br><span class="line">            Reflect.set(target, key, value, receiver)</span><br><span class="line">            collection[oID + &apos;&apos; + key] &amp;&amp; collection[oID + &apos;&apos; + key].forEach(c =&gt; &#123;</span><br><span class="line">                c()</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。<br>这里用Proxy是因为当你在可观察对象上加入新的属性时，就不会像Object.defineProperty那样新的属性没法监听了。</p></blockquote><h2 id="redux-react"><a href="#redux-react" class="headerlink" title="redux (react)"></a>redux (react)</h2><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1538409824404&amp;di=ed0cc0b3c1ff09cdc16ddc264b5a06e2&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.w2bc.com%2Fupload%2F201611%2F30%2F201611302054015692.jpg" alt="image"><br>这里不讲怎么使用react-redux，谈谈redux的优点和缺点  </p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>redux的优点在SPA应用中最有体现，当然分页也可以用，redux解决兄弟组件间通信，只要connect一个组件，这个组件无论在任何地方都能拿到全局的state(redux的state)  </li><li>redux让应用的状态变化变得更加可预测，必须通过action改变state</li><li>redux与很多中间件结合，搭配immutable使应用的性能提升，开发效率提高。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>store给我的感觉是在写全局变量，当一个复杂大型的项目多人一起开发时，命名就有可能出现重复，本来想更改这个模块的state，存在相互影响的问题，所以一般大家会对自己的模块增加命名空间解决此问题</li><li>为了配合函数式编程，不可变思想，导致存在大量的模版代码，这个虽然说不上是缺点，但是开发起来就很头痛，所以也衍生出很多代码来自动生成模版。  </li></ul><p>这些缺点也让作者出现’打脸式’回答：’You might not need Redux’,’try mobx’，其实就是应用场景比较单一，不能覆盖多种场景导致的。正所谓你之蜜糖，我之砒霜。</p><h2 id="mobx-react"><a href="#mobx-react" class="headerlink" title="mobx(react)"></a>mobx(react)</h2><p><img src="https://cn.mobx.js.org/flow.png" alt="image"></p><p>从图中看出和redux对比，就是不用redux更改store，而是actions直接修改sotre了，因为mobx的原理是通过观察者模式对数据做出追踪处理，在对可观察属性的作出变更或者引用的时候，触发其依赖的监听函数。<br>什么意思呢？像redux的数据是不可变的，如果你理解不可变的话。它需要更改数据的引用来感知数据的变化，而mobx不会更改数据的引用，是通过更改值，监测值的变化进而重新渲染等工作。</p><h4 id="store"><a href="#store" class="headerlink" title="store"></a>store</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import &#123;</span><br><span class="line">  observable,</span><br><span class="line">  action,</span><br><span class="line">  configure,</span><br><span class="line">  computed,</span><br><span class="line">  runInAction</span><br><span class="line">&#125; from &apos;mobx&apos;;</span><br><span class="line"></span><br><span class="line">configure(&#123; enforceActions: true &#125;);</span><br><span class="line">// useStrict(true); mobx4之前</span><br><span class="line"></span><br><span class="line">class Store &#123;</span><br><span class="line">    @observable id = 1;</span><br><span class="line">    @observable data = [];</span><br><span class="line"></span><br><span class="line">    @action.bound</span><br><span class="line">    @action(&apos;find data&apos;)</span><br><span class="line">      async findData() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">      const res = await axios(&#123;</span><br><span class="line">        method: &apos;POST&apos;,</span><br><span class="line">        url: &apos;/metadata/api/data&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            id: this.id</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      runInAction(() =&gt; &#123;</span><br><span class="line">        this.data = res.data || [];</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">      console.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">    @computed</span><br><span class="line">    get pageCount() &#123;</span><br><span class="line">        return Math.ceil(this.totalCount / this.pageSize);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  store: new Store()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Provider &#123;...store&#125;&gt;</span><br><span class="line">      &lt;Frame &#123;...options&#125;&gt;</span><br><span class="line">        &lt;Entry /&gt;</span><br><span class="line">      &lt;/Frame&gt;</span><br><span class="line">    &lt;/Provider&gt;,</span><br><span class="line">    document.getElementById(&apos;app&apos;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="component"><a href="#component" class="headerlink" title="component"></a>component</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@inject(&apos;store&apos;)</span><br><span class="line">@observer</span><br><span class="line">export default class Page extends Component &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pou出了一段mobx我自己的用法，可以看出mobx没有redux中的Actions、Action Creator、 Action Types、Reducer、Global Store，一个Store把所有事都干了，在 Mobx 中可以使用 inject 获得 store 依赖。然后 store 可以传递 substate 和 actions 给组件。Mobx 的 observer 确保组件在 store 中 observable 的属性变化时更新。</p><h2 id="mobx对比redux"><a href="#mobx对比redux" class="headerlink" title="mobx对比redux"></a>mobx对比redux</h2><h4 id="学习难度"><a href="#学习难度" class="headerlink" title="学习难度"></a>学习难度</h4><p>有人说mobx简单，redux较难，是因为redux延伸出的东西太多，mobx把这些封装到一起，单说redux这个抽象的理念比较难理解，再言之，我认为两种语言的学习难度都不能作为是否选择这个状态管理库的先决条件，作为一个优秀的开发者，两者还是都要学习了解的。</p><h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><p>在写redux的action的时候，总是需要用到扩展语句或者Object.assign()的方式来得到一个新的state，这一点对于JavaScript而言是对象的浅拷贝，它对内存的开销肯定是大于mobX中那样直接操作对象属性的方式大得多。<br>但是对于现在的浏览器和硬件的性能来说一般的应用都不会遇到这种性能的问题。</p><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>redux适用大型复杂多人开发的项目，是因为redux的特性是单向的数据流，任何操作和行为的结果都是可预测的，易测试的。而mobx也是适用较复杂的，如果太简单的话直接setState的就好了，mobx相对redux显得有些灵活，所以如果要在大型项目用的化，还是团队内部约定规范，使项目变得易维护。</p><h4 id="开发体验"><a href="#开发体验" class="headerlink" title="开发体验"></a>开发体验</h4><p>我个人认为mobx的开发体验简直不要太爽，不需要构思reducer如何把一个旧的state换成新的state，可能一个不小心就把一个key的值覆盖掉,mobx而是直接赋值。没有冗余的actions模版代码，更不存在命名空间问题，相信无论哪个开发者用过mobx和redux之后都会认为mobx的开发舒适度更高一些。</p><p>redux更像是手动挡的车，mobx更像是自动挡的。</p><h2 id="心得-amp-amp-最佳实践"><a href="#心得-amp-amp-最佳实践" class="headerlink" title="心得&amp;&amp;最佳实践"></a>心得&amp;&amp;最佳实践</h2><p>最近做的项目基于mobx + react系写的，回头看了一下项目，一些地方并没有遵循最佳实践的写法，而是有种redux的思想写mobx的感觉。<br>官方介绍建议新建两个store（实际上应该是两种），一个UI state一个domain state</p><ul><li>UI state是指当前UI的状态，比如：窗口尺寸、当前展示的页面、渲染状态、网络状态等等</li><li>Domain state则主要包含页面所需的各种数据（一般是需要从后端获取的）。例如：<ul><li>文章详情（id为索引的数据表）</li><li>首页feed（只有一个，不需要列表）</li><li>推荐列表（推荐id索引的数据表，每一项的内容又是一个文章id的列表）</li></ul></li></ul><p>redux + PureComponent + immutable是提升性能的最佳实践<br>而mobx自己做了这些事情。<br>也导致了mobx在双向绑定的同时禁掉了react自身的刷新</p><p>PureComponent 有很多坑，这里就不一一列举了，网上有很多关于PureComponent的最佳用法。</p><p>redux改变值的方式是通过拷贝原来的对象生成新的对象，从而触发组件的componentWillReceiveProps，而MobX改变值只是在原始值的基础上改变，所以值的引用是没有改变的，这也就导致使MobX不会触发componentWillReceiveProps。</p><p>基于这种原因所以mobx-react提供了componentWillReact来触发MobX值的改变，但是它不只是监听MobX值的改变，同时包含componentReceiveProps的功能，所以在使用MobX之后，并不需要componentWillReceiveProps方法了。</p>]]></content>
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redux&amp;mobx </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>first</title>
      <link href="/2018/06/13/first/"/>
      <url>/2018/06/13/first/</url>
      <content type="html"><![CDATA[]]></content>
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/06/13/hello-world/"/>
      <url>/2018/06/13/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      <categories>
          
          <category> other </category>
          
      </categories>
      
      
        <tags>
            
            <tag> other </tag>
            
        </tags>
      
    </entry>
    
  
  
</search>
