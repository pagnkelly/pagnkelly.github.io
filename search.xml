<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>redux-mobx</title>
      <link href="/2018/10/04/redux-mobx/"/>
      <url>/2018/10/04/redux-mobx/</url>
      <content type="html"><![CDATA[<h1 id="redux-amp-mobx对比"><a href="#redux-amp-mobx对比" class="headerlink" title="redux&amp;mobx对比"></a>redux&amp;mobx对比</h1><p><img src="https://img3.mukewang.com/5b59ddc60001245910000502.jpg" alt="image"></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>redux和mobx都是javascript的状态管理库，我们团队一直都在用它与react一起使用，我一直都在用redux，各种项目，各种用法。redux + thunk, redux + saga,或是引入immutable。我最近在一个后台内部使用的项目上尝试了mobx，由于有redux的使用基础，询问了下用过的同事，传授了几句话，甚至没看mobx的文档就开始使用了，可见redux和mobx从使用上这方面讲，存在很多的相同点。可能你看过很多的文章有关于这方面的，我写的也与他们别无二至，我的观点就是mobx也好，redux也好，他们各有优缺点，用哪一个都没有错，即使你的项目越来越大，mobx也完全可以胜任。</p><h2 id="主要内容"><a href="#主要内容" class="headerlink" title="主要内容"></a>主要内容</h2><ul><li>函数式编程，面向对象编程和响应式编程</li><li>简单讲下redux，着重讲下mobx</li><li>对比redux&amp;mobx优缺点</li><li>使用mobx时的心得体会</li></ul><h3 id="函数式编程，面向对象编程和响应式编程"><a href="#函数式编程，面向对象编程和响应式编程" class="headerlink" title="函数式编程，面向对象编程和响应式编程"></a>函数式编程，面向对象编程和响应式编程</h3><p>之所以讲这个，是因为redux是遵循函数式编程思想，例如reducer通过一个个的<strong>纯函数</strong>把旧的state生成新的state，而不是改变旧的state,这就存在函数式编程的思想。又引出了一个概念<strong>纯函数</strong>，所谓纯函数就是同样的输入，同样的输出。举个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function add (a, b) &#123;</span><br><span class="line">    return a + b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">add(1, 2); // 3</span><br></pre></td></tr></table></figure></p><p>最简单的一个例子，add函数在输入1，2的参数情况下，始终会输出3。不会出现任何所谓的副作用，也就是影响到其他的地方，例如全局变量。<br>ok，有一个问题，</p><h3 id="redux为什么要用纯函数来处理state"><a href="#redux为什么要用纯函数来处理state" class="headerlink" title="redux为什么要用纯函数来处理state?"></a>redux为什么要用纯函数来处理state?</h3><blockquote><p>reducer将旧的状态（prev）和要修改的数据一起传进去，然后返回一个新的（next）状态，prev和next相比较来确定storge数据是否改变。如果我们用不纯的函数，prev和next将一致，就算数据改变，hasChanged也会是false。</p></blockquote><h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><p>你可能常常听到面向对象有三大特性：<strong>封装，继承，多态</strong>。这里不做过多阐述。</p><blockquote><p>说下面向对象编程产生的原因：由于面向过程在构造系统时，无法解决<br><strong>重用，维护，扩展</strong><br>的问题，代码逻辑过于复杂，代码晦涩难懂，因此人们开始想能不能让计算机直接模拟现实的环境，以人类解决问题的方法，思路，习惯和步骤来设计相应的应用程序。于是，面向对象的编程思想就产生了。</p></blockquote><p>面向对象编程最重要的就是类，类是创建对象的模版，一个类可以创建多个对象。mobx的store就是一个个类，这里的类只创造了一个对象，多个类的实例化也就是多个store。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123; observable, action &#125; <span class="keyword">from</span> <span class="string">'mobx'</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IndexStore</span> </span>&#123;</span><br><span class="line">  @observable searchField = <span class="number">1</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">otherStore</span> </span>&#123;</span><br><span class="line">  @observable searchField = <span class="number">1</span>;</span><br><span class="line">  ...</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> &#123;</span><br><span class="line">  index: <span class="keyword">new</span> IndexStore(),</span><br><span class="line">  other: <span class="keyword">new</span> otherStore()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="响应式编程"><a href="#响应式编程" class="headerlink" title="响应式编程"></a>响应式编程</h2><p>这里我看到一个很好的比喻</p><blockquote><p>老张还喝水，那么煮开水<br>有两把水壶，一个是普通水壶，一个是响水壶.  </p><ol><li>老张把水壶放到火上，在旁边等待着水开。（同步阻塞）<br>老张觉得自己有点傻</li><li>于是老张把水壶放到火上，去客厅看电视，时不时去厨房看看水开没开（同步非阻塞）<br>老张还是觉得有点傻，于是乎换了水壶</li><li>这回用的是响水壶，老张继续在旁边等着响。（异步阻塞）<br>老张觉得这样不用等啊，听声就好了</li><li>于是老张去客厅看电视了，响了再去看水壶（异步非阻塞）<br>老张心满意足，很是傲娇</li></ol></blockquote><blockquote><p>回归到本质回答这个问题：响应式编程，本质上是对数据流或某种变化所作出的反应，但是这个变化什么时候发生是未知的，所以他是一种基于异步、回调的方式在处理问题。</p></blockquote><h3 id="那么mobx在哪里用到了这种思想呢？"><a href="#那么mobx在哪里用到了这种思想呢？" class="headerlink" title="那么mobx在哪里用到了这种思想呢？"></a>那么mobx在哪里用到了这种思想呢？</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">var globalID = 0</span><br><span class="line">function observable(obj) &#123;</span><br><span class="line">    var oID = ++globalID</span><br><span class="line">    return new Proxy(obj, &#123;</span><br><span class="line">        get: function (target, key, receiver) &#123;</span><br><span class="line">            collect.startCollect(oID + &apos;&apos; +key)</span><br><span class="line">            return Reflect.get(target, key, receiver)</span><br><span class="line">        &#125;,</span><br><span class="line">        set: function (target, key, value, receiver) &#123;</span><br><span class="line">            Reflect.set(target, key, value, receiver)</span><br><span class="line">            collection[oID + &apos;&apos; + key] &amp;&amp; collection[oID + &apos;&apos; + key].forEach(c =&gt; &#123;</span><br><span class="line">                c()</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>Proxy 可以理解成，在目标对象之前架设一层“拦截”，外界对该对象的访问，都必须先通过这层拦截，因此提供了一种机制，可以对外界的访问进行过滤和改写。Proxy 这个词的原意是代理，用在这里表示由它来“代理”某些操作，可以译为“代理器”。<br>这里用Proxy是因为当你在可观察对象上加入新的属性时，就不会像Object.defineProperty那样新的属性没法监听了。</p></blockquote><h2 id="redux-react"><a href="#redux-react" class="headerlink" title="redux (react)"></a>redux (react)</h2><p><img src="https://timgsa.baidu.com/timg?image&amp;quality=80&amp;size=b9999_10000&amp;sec=1538409824404&amp;di=ed0cc0b3c1ff09cdc16ddc264b5a06e2&amp;imgtype=0&amp;src=http%3A%2F%2Fpic.w2bc.com%2Fupload%2F201611%2F30%2F201611302054015692.jpg" alt="image"><br>这里不讲怎么使用react-redux，谈谈redux的优点和缺点  </p><h3 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h3><ul><li>redux的优点在SPA应用中最有体现，当然分页也可以用，redux解决兄弟组件间通信，只要connect一个组件，这个组件无论在任何地方都能拿到全局的state(redux的state)  </li><li>redux让应用的状态变化变得更加可预测，必须通过action改变state</li><li>redux与很多中间件结合，搭配immutable使应用的性能提升，开发效率提高，这里要吐槽下，redux就是个白莲花，弄的自己那么纯洁，各种漏洞需要其他人来填补，本来以为学个redux就ok了，redux-thunk，redux-saga,imutable都是什么鬼。</li></ul><h3 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h3><ul><li>store给我的感觉是在写全局变量，当一个复杂大型的项目多人一起开发时，命名就有可能出现重复，本来想更改这个模块的state，存在相互影响的问题，所以一般大家会对自己的模块增加命名空间解决此问题</li><li>为了配合函数式编程，不可变思想，导致存在大量的模版代码，这个虽然说不上是缺点，但是开发起来就很头痛，所以也衍生出很多代码来自动生成模版。  </li></ul><p>这些缺点也让作者出现’打脸式’回答：’You might not need Redux’,’try mobx’，其实就是应用场景比较单一，不能覆盖多种场景导致的。正所谓你之蜜糖，我之砒霜。</p><h2 id="mobx-react"><a href="#mobx-react" class="headerlink" title="mobx(react)"></a>mobx(react)</h2><p><img src="https://cn.mobx.js.org/flow.png" alt="image"></p><p>从图中看出和redux对比，就是不用redux更改store，而是actions直接修改sotre了，因为mobx的原理是通过观察者模式对数据做出追踪处理，在对可观察属性的作出变更或者引用的时候，触发其依赖的监听函数。<br>什么意思呢？像redux的数据是不可变的，如果你理解不可变的话。它需要更改数据的引用来感知数据的变化，而mobx不会更改数据的引用，是通过更改值，监测值的变化进而重新渲染等工作。</p><h4 id="store"><a href="#store" class="headerlink" title="store"></a>store</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">import &#123;</span><br><span class="line">  observable,</span><br><span class="line">  action,</span><br><span class="line">  configure,</span><br><span class="line">  computed,</span><br><span class="line">  runInAction</span><br><span class="line">&#125; from &apos;mobx&apos;;</span><br><span class="line"></span><br><span class="line">configure(&#123; enforceActions: true &#125;);</span><br><span class="line">// useStrict(true); mobx4之前</span><br><span class="line"></span><br><span class="line">class Store &#123;</span><br><span class="line">    @observable id = 1;</span><br><span class="line">    @observable data = [];</span><br><span class="line">    </span><br><span class="line">    @action.bound</span><br><span class="line">    @action(&apos;find data&apos;)</span><br><span class="line">      async findData() &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">      const res = await axios(&#123;</span><br><span class="line">        method: &apos;POST&apos;,</span><br><span class="line">        url: &apos;/metadata/api/data&apos;,</span><br><span class="line">        data: &#123;</span><br><span class="line">            id: this.id</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;);</span><br><span class="line">      runInAction(() =&gt; &#123;</span><br><span class="line">        this.data = res.data || [];</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; catch (e) &#123;</span><br><span class="line">      console.log(e);</span><br><span class="line">    &#125;</span><br><span class="line">    @computed</span><br><span class="line">    get pageCount() &#123;</span><br><span class="line">        return Math.ceil(this.totalCount / this.pageSize);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">export default &#123;</span><br><span class="line">  store: new Store()</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="entry"><a href="#entry" class="headerlink" title="entry"></a>entry</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ReactDOM.render(</span><br><span class="line">    &lt;Provider &#123;...store&#125;&gt;</span><br><span class="line">      &lt;Frame &#123;...options&#125;&gt;</span><br><span class="line">        &lt;Entry /&gt;</span><br><span class="line">      &lt;/Frame&gt;</span><br><span class="line">    &lt;/Provider&gt;,</span><br><span class="line">    document.getElementById(&apos;app&apos;)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="component"><a href="#component" class="headerlink" title="component"></a>component</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">@inject(&apos;store&apos;)</span><br><span class="line">@observer</span><br><span class="line">export default class Page extends Component &#123;</span><br><span class="line">    ....</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>pou出了一段mobx我自己的用法，可以看出mobx没有redux中的Actions、Action Creator、 Action Types、Reducer、Global Store，一个Store把所有事都干了，在 Mobx 中可以使用 inject 获得 store 依赖。然后 store 可以传递 substate 和 actions 给组件。Mobx 的 observer 确保组件在 store 中 observable 的属性变化时更新。</p><h2 id="mobx对比redux"><a href="#mobx对比redux" class="headerlink" title="mobx对比redux"></a>mobx对比redux</h2><h4 id="学习难度"><a href="#学习难度" class="headerlink" title="学习难度"></a>学习难度</h4><p>有人说mobx简单，redux较难，是因为redux延伸出的东西太多，mobx把这些封装到一起，单说redux这个抽象的理念比较难理解，再言之，我认为两种语言的学习难度都不能作为是否选择这个状态管理库的先决条件，作为一个优秀的开发者，两者还是都要学习了解的。</p><h4 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h4><p>在写redux的action的时候，总是需要用到扩展语句或者Object.assign()的方式来得到一个新的state，这一点对于JavaScript而言是对象的浅拷贝，它对内存的开销肯定是大于mobX中那样直接操作对象属性的方式大得多。<br>但是对于现在的浏览器和硬件的性能来说一般的应用都不会遇到这种性能的问题。</p><h4 id="适用场景"><a href="#适用场景" class="headerlink" title="适用场景"></a>适用场景</h4><p>redux适用大型复杂多人开发的项目，是因为redux的特性是单向的数据流，任何操作和行为的结果都是可预测的，易测试的。而mobx也是适用较复杂的，如果太简单的话直接setState的就好了，mobx相对redux显得有些灵活，所以如果要在大型项目用的化，还是团队内部约定规范，使项目变得易维护。</p><h4 id="开发体验"><a href="#开发体验" class="headerlink" title="开发体验"></a>开发体验</h4><p>我个人认为mobx的开发体验简直不要太爽，不需要构思reducer如何把一个旧的state换成新的state，可能一个不小心就把一个key的值覆盖掉,mobx而是直接赋值。没有冗余的actions模版代码，更不存在命名空间问题，相信无论哪个开发者用过mobx和redux之后都会认为mobx的开发舒适度更高一些。</p><h2 id="心得-amp-amp-最佳实践"><a href="#心得-amp-amp-最佳实践" class="headerlink" title="心得&amp;&amp;最佳实践"></a>心得&amp;&amp;最佳实践</h2><p>最近做的项目基于mobx + react系写的，回头看了一下项目，一些地方并没有遵循最佳实践的写法，而是有种redux的思想写mobx的感觉。<br>官方介绍建议新建两个store（实际上应该是两种），一个UI state一个domain state</p><ul><li>UI state是指当前UI的状态，比如：窗口尺寸、当前展示的页面、渲染状态、网络状态等等</li><li>Domain state则主要包含页面所需的各种数据（一般是需要从后端获取的）。例如： <ul><li>文章详情（id为索引的数据表）</li><li>首页feed（只有一个，不需要列表）</li><li>推荐列表（推荐id索引的数据表，每一项的内容又是一个文章id的列表）</li></ul></li></ul><p>redux + PureComponent + immutable是提升性能的最佳实践<br>而mobx自己做了这些事情。<br>也导致了mobx在双向绑定的同时禁掉了react自身的刷新</p><p>PureComponent 有很多坑，这里就不一一列举了，网上有很多关于PureComponent的最佳用法。</p><p>redux改变值的方式是通过拷贝原来的对象生成新的对象，从而触发组件的componentWillReceiveProps，而MobX改变值只是在原始值的基础上改变，所以值的引用是没有改变的，这也就导致使MobX不会触发componentWillReceiveProps。</p><p>基于这种原因所以mobx-react提供了componentWillReact来触发MobX值的改变，但是它不只是监听MobX值的改变，同时包含componentReceiveProps的功能，所以在使用MobX之后，并不需要componentWillReceiveProps方法了。</p>]]></content>
      
      
    </entry>
    
    <entry>
      <title>first</title>
      <link href="/2018/06/13/first/"/>
      <url>/2018/06/13/first/</url>
      <content type="html"><![CDATA[]]></content>
      
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/06/13/hello-world/"/>
      <url>/2018/06/13/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
    </entry>
    
  
  
</search>
